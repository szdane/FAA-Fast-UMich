pre-TRACON Re-routing Model (Single-Aircraft Case) Workflow Sheet

File Name: "preTRACON congestion sections1.py" _____________________________
Description:
Creates an octi-linear grid of points over which a weighted shortest-path can be calculated into the TRACON, using one of the given metering fixes. Weights (input from dataset generated by Yuwei Hu) are based on estimated congestion in discrete square "congestion zones."

Inputs:
1. (longitude, latitude) ordered pairs indicating the location of the given airport and the TRACON-entry metering fixes
2. Time/coordinate of entry to the pre-TRACON
3. Congestion counts for each zone, and the unit length of the congestion squares

Outputs:
1. Trajectory re-route accounting for congestion (+visualization)
2. Trajectory re-route not accounting for congestion (+visualization)

_____________________________________________________________________________
File Name: "ExperimentCongestion-most common wypts.py"
Description:
Runs the octi-linear congestion-based re-route from the previous file over every flight in the given dataset. Outputs a dataframe and heatmap visualization which indicates how many times each node was included in a trajectory re-route. A high number indicates that lots of trajectory re-routes passed through a node.

Inputs:
1. (longitude, latitude) ordered pairs indicating the location of the given airport and the TRACON-entry metering fixes
2. Time/coordinate of entry to the pre-TRACON, for each flight in the dataset
3. Congestion counts for each zone, and the unit length of the congestion squares

Outputs:
1. How many times each node was included in a trajectory re-route, AKA node popularity (+visualization)

_____________________________________________________________________________
File Name: "find optimal sparse points.py"
Description:
An implementation of the optimization model which finds the most ideal sparser set of nodes, given the node populatity calculated in the previous file. Details on the optimization formulation can be found in the update slides from the meeting on 5/21/25.

Inputs:
1. List of nodes from octi-linear grid, and those metering-fix nodes which lie on the "convex hull."
2. node popularity calculated in previous file
2. congestion cell coordinates

Outputs:
1. List of optimally-chosen nodes

_____________________________________________________________________________
File Name: "preTRACON congestion+weather.py" (THE FINALIZED MODEL)
Description:
Same concept as "preTRACON congestion sections1.py" with a couple of notable changes. Instead of an octi-linear grid, the network only contains the optimally-chosen nodes from the previous file. These nodes are connected using a set of rules detailed in the update slides from 6/18/25. Congestion in this updated version is calculated over the area of an entire edge instead of a square congestion zone (data from a new dataset designed by Yuwei Hu). Weather is included as a re-routing factor, and severity is also calculated over the area on an edge. The final edge-weighting is a convex combination of congestion and weather severity, the apportioning of which is user-adjustable.

Inputs:
1. List of sparse nodes, calculated by the previous file
2. List of metering-fix nodes on the "convex hull," plus the coordinate of the airport (AKA TRACON node)
3. Time/coordinate of entry to the pre-TRACON
4. Congestion counts for each edge
5. Weather severity levels for each edge

Outputs:
1. Trajectory re-route accounting for congestion only (+visualization)
2. Trajectory re-route accounting for weather only (+visualization)
3. Trajectory re-route accounting for a combination of congestion and weather (+visualization)
4. Trajectory re-route not accounting for congestion or weather (+visualization)